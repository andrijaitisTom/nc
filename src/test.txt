<template>
	<div id="content" class="app-notestutorial">
		<AppNavigation>
			<AppNavigationNew v-if="!loading" :text="t('notestutorial', 'New note')" :disabled="false"
				button-id="new-notestutorial-button" button-class="icon-add" @click="newNote" />
			<ul>
				<AppNavigationItem v-for="note in notes" :key="note.id"
					:title="note.title ? note.title : t('notestutorial', 'New note')"
					:class="{ active: currentNoteId === note.id }" @click="openNote(note)">
					<template slot="actions">
						<ActionButton v-if="note.id === -1" icon="icon-close" @click="cancelNewNote(note)">
							{{  t('notestutorial', 'Cancel note creation')  }}
						</ActionButton>
						<ActionButton v-else icon="icon-delete" @click="deleteNote(note)">
							{{  t('notestutorial', 'Delete note')  }}
						</ActionButton>
					</template>
				</AppNavigationItem>
			</ul>
		</AppNavigation>
		<AppContent>
			<div v-if="currentNote">
				<input ref="title" v-model="currentNote.title" type="text" :disabled="updating">
				<textarea ref="content" v-model="currentNote.content" :disabled="updating" />
				<textarea ref="physical" v-model="currentNote.physical" :disabled="updating" placeholder="physical" />

				<input type="button" class="primary" :value="t('notestutorial', 'Save')"
					:disabled="updating || !savePossible" @click="saveNote">
			</div>
			<!-- <div v-else id="emptycontent">
				<div class="icon-file" />
				<h2>{{  t('notestutorial', '...')  }}</h2>
			</div> -->

			<template>
				<div class="container">
					<div class="form-horizontal mb-2">
						<div class="form-group">
							<div class="col-auto">
								<label class="form-label text-large mr-2 pr-2">Filter:</label>
							</div>
							<div class="col">
								<input v-model="filters.title.value" class="form-input input-lg">
							</div>
						</div>
					</div>
					<v-table :data="nodesAndNotes" :filters="filters" :hide-sort-icons="true"
						class="my-2 table table-striped">
						<thead slot="head">
							<v-th sort-key="id">
								<b>ID</b>
							</v-th>
							<v-th sort-key="nodeName" default-sort="asc">
								<b>File Name</b>
							</v-th>
							<v-th sort-key="content">
								<b>Content</b>
							</v-th>
							<v-th sort-key="physical">
								<b>Physical Location</b>
							</v-th>
							<v-th sort-key="mtime">
								<b>Created</b>
							</v-th>
						</thead>
						<tbody slot="body" slot-scope="{displayData}">
							<tr v-for="row in displayData" :key="row.id">
								<td>{{  row.id  }}</td>
								<td>{{  row.nodeName  }}</td>
								<td>{{  row.content  }}</td>
								<td>{{  row.physical  }}</td>
								<td>
									{{  new Date(row.mtime * 1000).toLocaleString('en-GB', { dateStyle: 'short' })  }}
								</td>
							</tr>
						</tbody>
					</v-table>
				</div>
			</template>
		</AppContent>
	</div>
</template>

<script>
import ActionButton from '@nextcloud/vue/dist/Components/ActionButton'
import AppContent from '@nextcloud/vue/dist/Components/AppContent'
import AppNavigation from '@nextcloud/vue/dist/Components/AppNavigation'
import AppNavigationItem from '@nextcloud/vue/dist/Components/AppNavigationItem'
import AppNavigationNew from '@nextcloud/vue/dist/Components/AppNavigationNew'

import '@nextcloud/dialogs/styles/toast.scss'
import { generateUrl } from '@nextcloud/router'
import { showError, showSuccess } from '@nextcloud/dialogs'
import axios from '@nextcloud/axios'
import users from './users.json'
import songs from './data/karaoke.json'
import { merge } from 'jquery'

export default {
	name: 'App',
	components: {
		ActionButton,
		AppContent,
		AppNavigation,
		AppNavigationItem,
		AppNavigationNew,
	},
	data: () => ({
		notes: [],
		nodes: [],
		nodesAndNotes: [],
		notRegistered: [],
		currentNoteId: null,
		updating: false,
		loading: true,
		users,

		songs,
		filters: {
			title: { value: '', keys: ['title', 'content', 'physical'] },
		},

	}),

	computed: {

		/**
		 * Return the currently selected note object
		 *
		 * @return {object | null}
		 */
		currentNote() {
			if (this.currentNoteId === null) {
				return null
			}

			return this.notes.find((note) => note.id === this.currentNoteId)
		},

		/**
		 * Returns true if a note is selected and its title is not empty
		 *
		 * @return {boolean}
		 */
		savePossible() {
			return this.currentNote && this.currentNote.title !== ''
		},
	},
	/**
	 * Fetch list of notes when the component is loaded
	 */
	async mounted() {

		try {
			this.createNote({
				id: '1',
				title: 'currentObject',
				user_id: 'as',
				content: 'currentObject',
				physical: 'currentObject',
			})
			const response = await axios.get(generateUrl('/apps/notestutorial/notes'))
			this.notes = response.data
			const nodesResponse = await axios.get(generateUrl('/apps/notestutorial/nodelist/Templates'))
			this.nodes = nodesResponse.data

			this.nodesAndNotes = this.nodes.map(t1 => ({ ...t1, ...this.notes.find(t2 => t2.id === t1.id) }))

			// console.log(this.nodesAndNotes)

			const notesIds = []
			const nodesIds = []

			for (let index = 0; index < this.nodes.length; index++) {
				const element = this.nodes[index]
				// console.log(element.id)
				nodesIds.push(element.id)

			}
			for (let index = 0; index < this.notes.length; index++) {
				const element = this.notes[index]
				// console.log(element.id)
				notesIds.push(element.id)

			}

			// console.log(`notes ids - ${notesIds} ..... nodes ids -${nodesIds}`)

			const matches = nodesIds.filter(id => !notesIds.includes(id))
			// console.log(matches)

			for (let index = 0; index < matches.length; index++) {
				const currentID = matches[index]
				const currentObject = this.nodes.find(node => node.id === currentID)
				// console.log(currentObject)
				const currentFileInfo = {
					id: currentObject.id,
					title: currentObject.nodeName,
					content: currentObject.path,
					physical: currentObject.mimetype,
				}
				this.notRegistered.push(currentFileInfo)

			}
			console.log(this.notRegistered)

			for (let index = 0; index < this.notRegistered.length; index++) {
				// this.createNote(this.notRegistered[index])
				console.log(this.notRegistered[index])

			}



			// if (this.currentNoteId === -1) {
			// 	this.createNote(this.currentNote)
			// } else {
			// 	this.updateNote(this.currentNote)

			// }
		} catch (e) {
			console.error(e)
			showError(t('notestutorial', 'Could not fetch notes'))
		}
		this.loading = false
	},
	/**
	 * Fetch list of nodes when the component is loaded
	 */
	methods: {
		/**
		 * Create a new note and focus the note content field automatically
		 *
		 * @param {object} note Note object
		 */
		openNote(note) {
			if (this.updating) {
				return
			}
			this.currentNoteId = note.id
			this.$nextTick(() => {
				this.$refs.content.focus()
			})
		},
		/**
		 * Action tiggered when clicking the save button
		 * create a new note or save
		 */
		saveNote() {

			if (this.currentNoteId === -1) {
				this.createNote(this.currentNote)
			} else {
				this.updateNote(this.currentNote)
			}
		},
		/**
		 * Create a new note and focus the note content field automatically
		 * The note is not yet saved, therefore an id of -1 is used until it
		 * has been persisted in the backend
		 */
		newNote() {
			if (this.currentNoteId !== -1) {
				this.currentNoteId = -1
				this.notes.push({
					id: -1,
					title: '',
					content: '',
					physical: '',
				})
				this.$nextTick(() => {
					this.$refs.title.focus()
				})
			}
		},
		/**
		 * Abort creating a new note
		 */
		cancelNewNote() {
			this.notes.splice(this.notes.findIndex((note) => note.id === -1), 1)
			this.currentNoteId = null
		},
		/**
		 * Create a new note by sending the information to the server
		 *
		 * @param {object} note Note object
		 */
		async createNote(note) {
			this.updating = true
			try {
				const response = await axios.post(generateUrl('/apps/notestutorial/notes'), note)
				const index = this.notes.findIndex((match) => match.id === this.currentNoteId)
				this.$set(this.notes, index, response.data)
				this.currentNoteId = response.data.id
			} catch (e) {
				console.error(e)
				showError(t('notestutorial', 'Could not create the note'))
			}
			this.updating = false
		},
		/**
		 * Update an existing note on the server
		 *
		 * @param {object} note Note object
		 */
		async updateNote(note) {
			this.updating = true
			try {
				await axios.put(generateUrl(`/apps/notestutorial/notes/${note.id}`), note)
			} catch (e) {
				console.error(e)
				showError(t('notestutorial', 'Could not update the note'))
			}
			this.updating = false
		},
		/**
		 * Delete a note, remove it from the frontend and show a hint
		 *
		 * @param {object} note Note object
		 */
		async deleteNote(note) {
			try {
				await axios.delete(generateUrl(`/apps/notestutorial/notes/${note.id}`))
				this.notes.splice(this.notes.indexOf(note), 1)
				if (this.currentNoteId === note.id) {
					this.currentNoteId = null
				}
				showSuccess(t('notestutorial', 'Note deleted'))
			} catch (e) {
				console.error(e)
				showError(t('notestutorial', 'Could not delete the note'))
			}
		},
	},
}
</script>
<style scoped>
body {
	padding: 1rem;
	color: #000;
}

thead {
	cursor: pointer;
}

td {
	white-space: nowrap;
}

.vt-sort::after {
	padding-left: 0.5em;
	display: inline-block;
}

.vt-sortable::after {
	content: "\25B2";
	color: transparent;
}

.vt-asc::after {
	content: "\25BC";
}

.vt-desc::after {
	content: "\25B2";
}

#app-content>div {
	width: 100%;
	height: 100%;
	padding: 20px;
	display: flex;
	flex-direction: column;
	flex-grow: 1;
}

input[type='text'] {
	width: 100%;
}

textarea {
	flex-grow: 1;
	width: 100%;
}

.container {
	padding-top: 100px;
}
</style>
